from math import ceil
import requests


def get_all_messages(session: requests.Session, page=1, part=1, msg_type='inbox') -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–ª–Ω–æ–º –≤–∏–¥–µ
        3 = offset (+20 for next page)
        type = inbox - –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        type = sent - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    messages = session.get(f'https://gym40.eljur.ru/journal-messages-ajax-action?'
                           f'method=getList&0={msg_type}&1=&2=&3={(page - 1) * 20}&4=0&5=&6=&7=0')
    msg = messages.json()
    return msg['list'][(part - 1) * 10:part * 10]


def get_max_pages(session: requests.Session, msg_type='inbox') -> tuple:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞–µ–ª—è"""
    response = session.get(f'https://gym40.eljur.ru/journal-messages-ajax-action?'
                           f'method=getList&0={msg_type}').json()
    pages = response['pager']['total']
    max_part_page, max_page = ceil(int(pages) / 10), ceil(int(pages) / 20)
    return max_part_page, max_page


def get_messages_info(messages: list, msg_type: str) -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
       –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    assert msg_type == 'sent' or msg_type == 'inbox'
    info = []
    for order, message in enumerate(messages):
        subject = message['subject']
        date = message['messageDateHuman']
        result = ''
        if msg_type == 'inbox':
            sender = message['fromUserHuman']
            result += f'{order + 1}. <b>{subject}</b> (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {date}), \t<i>{sender}</i>'
        elif msg_type == 'sent':
            recipients = message['recipientsHuman']
            if isinstance(recipients, list):
                recipients = '–ø–æ–ª—É—á–∞—Ç–µ–ª–∏: ' + ', '.join(recipients)
            else:
                recipients = '–ø–æ–ª—É—á–∞—Ç–µ–ª—å: ' + recipients
            result += f'{order + 1}. <b>{subject}</b> (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {date}), \t<i>{recipients}</i>'
        info.append(result)
    return info


def get_messages_content(messages: list, msg_type: str) -> list:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ...
       –î–∞—Ç–∞: ...
       –°–æ–æ–±—â–µ–Ω–∏–µ: ...

       –§–∞–π–ª—ã"""
    assert msg_type == 'sent' or msg_type == 'inbox'
    content = []
    for message in messages:
        message_files = ''
        if message['hasFiles']:
            files = message['files']
            for file in files:
                message_files += f'üìå <a href=\"{file["url"]}\">' \
                                 f'{file["filename"]}</a>\n'
                # <a href ="url">description</a>
        if msg_type == 'inbox':
            recipients = f"<b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> {message['fromUserHuman']}"
        elif msg_type == 'sent':
            recipients = message['recipientsHuman']
            if isinstance(recipients, list):
                recipients = '<b>–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:</b> ' + ', '.join(recipients)
            else:
                recipients = '<b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> ' + recipients
        subject = message['subject']
        full_date = message['msg_date'].split()
        date = full_date[0].split('-')
        date = f'{date[2]}.{date[1]}.{date[0]} {full_date[1]}'
        msg = message['body']
        if message_files:
            content.append(f'<b>–¢–µ–º–∞:</b> {subject}\n'
                           f'{recipients}\n'
                           f'<b>–î–∞—Ç–∞:</b> {date}\n\n'
                           f'<strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong>\n'
                           f'<code>{msg}</code>\n\n'
                           f'–§–∞–π–ª—ã:\n{message_files}')
        else:
            content.append(f'<b>–¢–µ–º–∞:</b> {subject}\n'
                           f'{recipients}\n'
                           f'<b>–î–∞—Ç–∞:</b> {date}\n\n'
                           f'<strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong>\n'
                           f'<code>{msg}</code>\n\n')
    return content
