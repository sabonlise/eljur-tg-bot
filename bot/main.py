import requests
import secrets

from telegram import ParseMode
from telegram import InlineKeyboardButton
from telegram import InlineKeyboardMarkup
from telegram import ReplyKeyboardRemove
from telegram import KeyboardButton
from telegram import ReplyKeyboardMarkup
from telegram.ext import CallbackContext
from telegram.ext import Updater
from telegram.ext import CommandHandler
from telegram.ext import MessageHandler
from telegram.ext import Filters
from telegram.ext import CallbackQueryHandler
from telegram.utils.request import Request

from bot.schedule import *
from bot.buttons import get_base_reply_keyboard
from bot.settings import TOKEN, REQUEST_KWARGS, CHAT_URL

from methods.authorization import auth
from methods.journal import *
from methods.crypto import password_encrypt


CALLBACK_BUTTON1_MARKS = "callback_button1_marks"
CALLBACK_BUTTON2_SKIPS = "callback_button2_skips"
CALLBACK_BUTTON3_SCHEDULE = "callback_button3_schedule"
CALLBACK_BUTTON4_BACK = "callback_button4_back"
CALLBACK_BUTTON5_MONDAY = "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
CALLBACK_BUTTON6_THURSDAY = "—á–µ—Ç–≤–µ—Ä–≥"
CALLBACK_BUTTON7_TUESDAY = "–≤—Ç–æ—Ä–Ω–∏–∫"
CALLBACK_BUTTON8_FRIDAY = '–ø—è—Ç–Ω–∏—Ü–∞'
CALLBACK_BUTTON9_WEDNESDAY = '—Å—Ä–µ–¥–∞'
CALLBACK_BUTTON10_SATURDAY = "—Å—É–±–±–æ—Ç–∞"
CALLBACK_BUTTON_HIDE_KEYBOARD = "callback_button9_hide"
CALLBACK_BUTTON_PREV_WEEK = 'callback_button_prev_week'
CALLBACK_BUTTON_NEXT_WEEK = 'callback_button_next_week'


TITLES = {
    CALLBACK_BUTTON1_MARKS: "–û—Ü–µ–Ω–∫–∏Ô∏è",
    CALLBACK_BUTTON2_SKIPS: "–ü—Ä–æ–ø—É—Å–∫–∏Ô∏è",
    CALLBACK_BUTTON3_SCHEDULE: "–î–Ω–µ–≤–Ω–∏–∫ Ô∏è",
    CALLBACK_BUTTON4_BACK: "–ù–∞–∑–∞–¥ Ô∏è",
    CALLBACK_BUTTON5_MONDAY: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ",
    CALLBACK_BUTTON6_THURSDAY: "–ß–µ—Ç–≤–µ—Ä–≥ ",
    CALLBACK_BUTTON7_TUESDAY: "–í—Ç–æ—Ä–Ω–∏–∫ ",
    CALLBACK_BUTTON8_FRIDAY: "–ü—è—Ç–Ω–∏—Ü–∞ ",
    CALLBACK_BUTTON9_WEDNESDAY: "–°—Ä–µ–¥–∞ ",
    CALLBACK_BUTTON10_SATURDAY: "–°—É–±–±–æ—Ç–∞ ",
    CALLBACK_BUTTON_HIDE_KEYBOARD: "–°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ",
    CALLBACK_BUTTON_PREV_WEEK: "‚¨ÖÔ∏è",
    CALLBACK_BUTTON_NEXT_WEEK: "‚û°Ô∏è"
}


def change_buttons(update: Update, context: CallbackContext):
    schedule = save_schedule(update=update, context=context)
    week_days = list(schedule.keys())
    TITLES[CALLBACK_BUTTON5_MONDAY] = week_days[0]
    TITLES[CALLBACK_BUTTON6_THURSDAY] = week_days[3]
    TITLES[CALLBACK_BUTTON7_TUESDAY] = week_days[1]
    TITLES[CALLBACK_BUTTON8_FRIDAY] = week_days[4]
    TITLES[CALLBACK_BUTTON9_WEDNESDAY] = week_days[2]
    TITLES[CALLBACK_BUTTON10_SATURDAY] = week_days[5]


def get_base_inline_keyboard():
    keyboard = [
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON1_MARKS], callback_data=CALLBACK_BUTTON1_MARKS),
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON2_SKIPS], callback_data=CALLBACK_BUTTON2_SKIPS),
        ],
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON3_SCHEDULE], callback_data=CALLBACK_BUTTON3_SCHEDULE),
            InlineKeyboardButton('–ß–∞—Ç', url=CHAT_URL)
        ],
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON_HIDE_KEYBOARD], callback_data=CALLBACK_BUTTON_HIDE_KEYBOARD),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_schedule():
    keyboard = [
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON5_MONDAY], callback_data=CALLBACK_BUTTON5_MONDAY),
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON6_THURSDAY], callback_data=CALLBACK_BUTTON6_THURSDAY),
        ],
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON7_TUESDAY], callback_data=CALLBACK_BUTTON7_TUESDAY),
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON8_FRIDAY], callback_data=CALLBACK_BUTTON8_FRIDAY)
        ],
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON9_WEDNESDAY], callback_data=CALLBACK_BUTTON9_WEDNESDAY),
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON10_SATURDAY], callback_data=CALLBACK_BUTTON10_SATURDAY)
        ],
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON_PREV_WEEK], callback_data=CALLBACK_BUTTON_PREV_WEEK),
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON4_BACK], callback_data=CALLBACK_BUTTON4_BACK),
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON_NEXT_WEEK], callback_data=CALLBACK_BUTTON_NEXT_WEEK)
        ],
    ]
    return InlineKeyboardMarkup(keyboard)


def user_exists(update: Update, context: CallbackContext):
    session_db = db_session.create_session()
    chat_id = update.effective_message.chat_id
    user = session_db.query(User).filter(User.telegram_id == chat_id).first()
    if user:
        return True
    return False


def keyboard_callback_handler(update: Update, context: CallbackContext):
    chat_id = update.effective_message.chat_id

    query = update.callback_query
    data = query.data

    current_text = update.effective_message.text

    if data == CALLBACK_BUTTON1_MARKS:
        # —Ç—É—Ç –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ü–µ–Ω–∫–∞—Ö
        context.bot.send_message(
            chat_id=chat_id,
            text="–û—Ü–µ–Ω–∫–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥:",
            reply_markup=get_base_inline_keyboard(),
        )
    elif data == CALLBACK_BUTTON2_SKIPS:
        # —Ç—É—Ç –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–ø—É—Å–∫–∞—Ö
        context.bot.send_message(
            chat_id=chat_id,
            text="–ü—Ä–æ–ø—É—Å–∫–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥:",
            reply_markup=get_base_inline_keyboard(),
        )
    elif data == CALLBACK_BUTTON3_SCHEDULE:
        storage[chat_id] = {'week_state': 0}
        change_buttons(update=update, context=context)
        query.edit_message_text(
            text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é',
            reply_markup=get_schedule(),
            parse_mode=ParseMode.HTML
        )
    elif data == CALLBACK_BUTTON4_BACK:
        context.bot.send_message(
            chat_id=chat_id,
            text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥",
            reply_markup=get_base_inline_keyboard(),
        )
        # help(update=update, context=context)
    elif data == CALLBACK_BUTTON_NEXT_WEEK:
        storage[chat_id]['week_state'] += 1
        if storage[chat_id]['week_state'] > 1:
            storage[chat_id]['week_state'] = 1
        text = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ <i>—Å–ª–µ–¥—É—é—â—É—é</i> –Ω–µ–¥–µ–ª—é.' \
            if storage[chat_id]['week_state'] == 1 \
            else '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ <i>—Ç–µ–∫—É—â—É—é</i> –Ω–µ–¥–µ–ª—é.'
        change_buttons(update=update, context=context)
        query.edit_message_text(
            text=text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_schedule(),
        )
    elif data == CALLBACK_BUTTON_PREV_WEEK:
        storage[chat_id]['week_state'] -= 1
        if storage[chat_id]['week_state'] < -1:
            storage[chat_id]['week_state'] = -1
        text = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ <i>–ø—Ä–µ–¥—ã–¥—É—â—É—é</i> –Ω–µ–¥–µ–ª—é.' \
            if storage[chat_id]['week_state'] == -1 \
            else '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ <i>—Ç–µ–∫—É—â—É—é</i> –Ω–µ–¥–µ–ª—é.'
        change_buttons(update=update, context=context)
        query.edit_message_text(
            text=text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_schedule(),
        )
    elif data in (CALLBACK_BUTTON5_MONDAY, CALLBACK_BUTTON6_THURSDAY,
                  CALLBACK_BUTTON7_TUESDAY, CALLBACK_BUTTON8_FRIDAY,
                  CALLBACK_BUTTON9_WEDNESDAY, CALLBACK_BUTTON10_SATURDAY):
        schedule = save_schedule(update=update, context=context)
        output = save_formatted_schedule(data, schedule)

        context.bot.send_message(
            chat_id=chat_id,
            text="\n".join(output),
            reply_markup=get_schedule(),
            parse_mode=ParseMode.HTML
        )
    elif data == CALLBACK_BUTTON_HIDE_KEYBOARD:
        context.bot.send_message(
            chat_id=chat_id,
            text="–°–∫—Ä—ã–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.\n\n–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –µ—ë –æ–±—Ä–∞—Ç–Ω–æ",
            reply_markup=ReplyKeyboardRemove(),
        )


def start(update: Update, context: CallbackContext):
    if user_exists(update=update, context=context):
        help(update=update, context=context)
    else:
        update.message.reply_text(
            text="–í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /login "
                 "–≤ —Ñ–æ—Ä–º–∞—Ç–µ\n/login <login> <password>",
            reply_markup=get_base_reply_keyboard()
        )


def help(update: Update, context: CallbackContext):
    update.message.reply_text(
        text="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
             "/login <login> <password> - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.\n"
             "/relogin <password> <password again> - —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –≤ –±–æ—Ç–µ –µ—Å–ª–∏ –≤—ã —Å–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–æ–ª—å –≤ —ç–ª–∂—É—Ä–µ.\n\n"
             "–ö–Ω–æ–ø–∫–∏:\n"
             "üéì –û—Ü–µ–Ω–∫–∏ - –í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥.\n"
             "üìñ –î–Ω–µ–≤–Ω–∏–∫ - –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é, —Ç–µ–∫—É—â—É—é –∏ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º.\n"
             "‚ùå –ü—Ä–æ–ø—É—Å–∫–∏ - –í–∞—à–∏ –ø—Ä–æ–ø—É—Å–∫–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥.",
        reply_markup=get_base_inline_keyboard(),
    )


def echo(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    text = update.message.text
    if text == '–ü–æ–º–æ—â—å':
        return help(update=update, context=context)
    elif text.startswith('/login'):
        if user_exists(update=update, context=context):
            reply_text = '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ï—Å–ª–∏ –≤—ã —Å–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–æ–ª—å, —Ç—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —á–µ—Ä–µ–∑ ' \
                         '–∫–æ–º–∞–Ω–¥—É /relogin.\n\t\t\t' \
                         '/relogin <password> <password again>'
            keyboard = get_base_reply_keyboard()
        else:
            try:
                logpass = text.split()
                login, password = logpass[1], logpass[2]
                session = requests.Session()
                auth(session, login, password)
                user = User()
                user.telegram_id = chat_id
                user.name = login
                user.hash = secrets.token_bytes(32)
                user.hashed_password = password_encrypt(password.encode(), user.hash)
                session_db = db_session.create_session()
                session_db.add(user)
                session_db.commit()
                reply_text = '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!'
                keyboard = get_base_inline_keyboard()
            except (ValueError, IndexError):
                keyboard = get_base_reply_keyboard()
                reply_text = '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.'
        update.message.reply_text(
            text=reply_text,
            reply_markup=keyboard,
        )
    elif text.startswith('/relogin'):
        if not user_exists(update=update, context=context):
            reply_text = '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤—ã–≤–∞–ª–∏—Å—å —Ä–∞–Ω–µ–µ.'
            keyboard = get_base_reply_keyboard()
        else:
            try:
                session_db = db_session.create_session()
                password = text.split()
                password1, password2 = password[1], password[2]
                assert password1 == password2, '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!'
                session = requests.Session()
                user = session_db.query(User).filter(User.telegram_id == chat_id).first()
                old_password = password_decrypt(user.hashed_password, user.hash).decode()
                if old_password == password2:
                    reply_text = '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ :('
                    keyboard = get_base_reply_keyboard()
                else:
                    auth(session, user.name, password1)
                    user.hash = secrets.token_bytes(32)
                    user.hashed_password = password_encrypt(password1.encode(), user.hash)
                    session_db.commit()
                    reply_text = '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!'
                    keyboard = get_base_inline_keyboard()
            except AssertionError as e:
                keyboard = get_base_reply_keyboard()
                reply_text = e.args[0]
            except (ValueError, IndexError):
                keyboard = get_base_reply_keyboard()
                reply_text = '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.'
        update.message.reply_text(
            text=reply_text,
            reply_markup=keyboard
        )


def main():
    # –ø—É—Ç—å –¥–æ –±–¥
    db_session.global_init('E:\\web-server\\db\\users.sqlite')
    # —Ç–æ–∫–µ–Ω –æ—Ç –±–æ—Ç–∞ –∏ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –∏–∑ —Ñ–∞–π–ª–∞ settings
    updater = Updater(
        token=TOKEN,
        use_context=True,
        request_kwargs=REQUEST_KWARGS
    )

    start_handler = CommandHandler("start", start)
    help_handler = CommandHandler("help", help)
    message_handler = MessageHandler(Filters.text, echo)
    buttons_handler = CallbackQueryHandler(callback=keyboard_callback_handler)

    updater.dispatcher.add_handler(start_handler)
    updater.dispatcher.add_handler(help_handler)
    updater.dispatcher.add_handler(message_handler)
    updater.dispatcher.add_handler(buttons_handler)

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
